###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet pb
/* dongliang.ma patch begin */
endsnippet

snippet pe
/* dongliang.ma patch end */
endsnippet

snippet def
#define ${1}
endsnippet
snippet define
#define ${1}
endsnippet
snippet #define
#define ${1}
endsnippet

snippet #if
#if ${1:FOO}
${2}
#endif  // $1
${3}
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifdef ${1:FOO}
#define ${1:SYMBOL} ${2:value}
#endif  // $1
${3}
endsnippet

snippet #ife
#if ${1:FOO}
${2}
#else
${3}
#endif  // $1
${4}
endsnippet

snippet inc
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet in
#include "${1}.h"
endsnippet

snippet is
#include <${1}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "int main(int argc, char *argv[])"
int main(int argc, char *argv[])
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
	return 0;
}
endsnippet

snippet main "int main()"
int main()
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet forr "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet


snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('_NSLIB_%s_' % (name)).upper()
else:
	snip.rv = snip.c`}
#define $1

${0}

#endif // $1

endsnippet


snippet t
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

snippet wh "while loop"
while(${1:/* condition */}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet while "while loop"
while(${1:/* condition */}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet do "do...while loop (do)"
do {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
} while(${1:/* condition */});
endsnippet

snippet ife
if (${1:/* condition */}) {
	${2:/* code */}
} else {
	${3:/* code */}
}
endsnippet

snippet ife1
if (${1:/* condition */}) {
	${2:/* code */}
} else {
	${3:/* code */}
}
endsnippet

snippet ife2
if (${1:/* condition 1 */}) {
	${2:/* code 1 */}
} else if (${3:/* condition 2 */}) {
	${4:/* code 2 */}
} else {
	${5:/* code else*/}
}
endsnippet

snippet ife3
if (${1:/* condition 1 */}) {
	${2:/* code  1 */}
} else if (${3:/* condition 2 */}) {
	${4:/* code 2 */}
} else if (${5:/* condition 3 */}) {
	${6:/* code 3 */}
} else {
	${7:/* code else */}
}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet el "else .. (else)"
else {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet else "else .. (else)"
else {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet
snippet elif "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */})
{
	${2:/* code */}
}
else
{
	${3:/* else */}
}
endsnippet

snippet prk
printk(KERN_INFO "${1}\n");
endsnippet

snippet printf
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet pr
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet pr0
printf("${0}\n");
endsnippet

snippet fpr
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet f0
${1:void} ${2:function_name}(void)
{
	${3:/* code */}
}
endsnippet
snippet f1
${1:void} ${2:function_name}(${3})
{
	${4:/* code */}
}
endsnippet
snippet f2
${1:void} ${2:function_name}(${3}, ${4})
{
	${5:/* code */}
}
endsnippet
snippet f3
${1:void} ${2:function_name}(${3}, ${4}, ${5})
{
	${6:/* code */}
}
endsnippet
snippet f4
${1:void} ${2:function_name}(${3}, ${4}, ${5}, ${6})
{
	${7:/* code */}
}
endsnippet
snippet f5
${1:void} ${2:function_name}(${3}, ${4}, ${5}, ${6}, ${7})
{
	${8:/* code */}
}
endsnippet

snippet fun
${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet
snippet fun0
${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet
snippet fun1
${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet
snippet fun2
${1:void} ${2:function_name}(${3}, ${4})
{
	${5}
}
endsnippet
snippet fun3
${1:void} ${2:function_name}(${3}, ${4}, ${5})
{
	${6}
}
endsnippet
snippet fun4
${1:void} ${2:function_name}(${3}, ${4}, ${5}, ${6})
{
	${7}
}
endsnippet
snippet fun5
${1:void} ${2:function_name}(${3}, ${4}, ${5}, ${6}, ${7})
{
	${8}
}
endsnippet

snippet st "struct"
struct ${1:foo}
{
	${0:/* fields */}
};
endsnippet

snippet struct "struct"
struct ${1:foo}
{
	${0:/* fields */}
};
endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet tds "typedef struct"
typedef struct ${2:$1_s }{
	${3:/* fields */}
} ${1:foo};
endsnippet

snippet "typedef struct" "typedef struct"
typedef struct ${2:$1_s }{
	${3:/* fields */}
} ${1:foo};
endsnippet

snippet enum "enumeration"
enum ${1:name} { $0 };
endsnippet

snippet tde "typedef enum"
typedef enum {
	${1:/* data */}
} ${2:foo};
endsnippet

snippet "typedef enum" "typedef enum"
typedef enum {
	${1:/* data */}
} ${2:foo};
endsnippet

snippet un
unsigned
endsnippet

snippet cc
/* ${1} */
endsnippet

snippet cd
/**< ${1} */
endsnippet

snippet tmp "std c"
#include <stdio.h>
#include <stdlib.h>

int main(int argc, const char *argv[])
{
	${1}
	return 0;
}
endsnippet

snippet tmp "*nix c"
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, const char *argv[])
{
	${1}
	return 0;
}
endsnippet

snippet tmp "tlpi c"
#include <unistd.h>
#include "tlpi_hdr.h"

int main(int argc, const char *argv[])
{
	${1}
	return 0;
}
endsnippet
# vim:ft=snippets:
