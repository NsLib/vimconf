priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

snippet tmp "std c++"
#include <cstdio>
#include <cstdlib>
#include <iostream>

using namespace std;

int main(int argc, const char *argv[])
{
	${1}
	return 0;
}
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet using
using namespace ${1:NsLib};
endsnippet
snippet use
using namespace ${1:NsLib};
endsnippet

snippet class "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}${1/.+/ \/\/ /m}$1${1/.+/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet template
template <typename ${1:T}>
endsnippet

snippet cout
cout << "${1}" << endl;
endsnippet
snippet cout1
cout << "${1}" << endl;
endsnippet
snippet cout2
cout << "${1}" << "${2}" << endl;
endsnippet
snippet cout3
cout << "${1}" << "${2}" << "${3}" << endl;
endsnippet
snippet cout4
cout << "${1}" << "${2}" << "${3}" << "${4}" << endl;
endsnippet
snippet cout5
cout << "${1}" << "${2}" << "${3}" << "${4}" << "${5}" << endl;
endsnippet
snippet cout6
cout << "${1}" << "${2}" << "${3}" << "${4}" << "${5}" << "${6}" << endl;
endsnippet
snippet cout7
cout << "${1}" << "${2}" << "${3}" << "${4}" << "${5}" << "${6}" << "${7}" << endl;
endsnippet

# vim:ft=snippets:
