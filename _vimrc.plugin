
"{{{ 通用编辑插件
"{{{
let g:gundo_width               = 60
let g:gundo_preview_height      = winheight(0) / 3 * 2
let g:gundo_right               = 1
"}}}

"{{{ rainbow 对于不同的括号，渲染成不同颜色
let g:rainbow_active = 1
let g:rainbow_conf = {
            \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
            \   'ctermfgs': ['lightgray', 'lightblue', 'lightmagenta', 'lightcyan'],
            \   'operators': '_,_',
            \   'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
            \   'separately': {
            \       '*': {},
            \       'lisp': {
            \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
            \           'ctermfgs': ['darkgray', 'darkblue', 'darkmagenta', 'darkcyan', 'darkred', 'darkgreen'],
            \       },
            \       'vim': {
            \           'parentheses': [['fu\w* \s*.*)','endfu\w*'], ['for','endfor'], ['while', 'endwhile'], ['if','_elseif\|else_','endif'], ['(',')'], ['\[','\]'], ['{','}']],
            \       },
            \       'tex': {
            \           'parentheses': [['(',')'], ['\[','\]'], ['\\begin{.*}','\\end{.*}']],
            \       },
            \       'css': 0,
            \       'stylus': 0,
            \   }
            \}
"}}}
"{{{ tabular    对齐插件
autocmd FileType markdown inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction
"}}}

"{{{ markdown
let g:vim_markdown_folding_disabled     = 1
"}}}
"}}}

"{{{ 效率插件

"{{{ easymotion
map <Leader><leader> <Plug>(easymotion-prefix)
"}}}

"{{{ vimwiki
let g:vimwiki_use_mouse         = 1
let g:vimwiki_camel_case        = 0
let g:vimwiki_hl_cb_checked     = 1
let g:vimwiki_folding           = 0
let g:vimwiki_CJK_length        = 1
let g:vimwiki_valid_html_tags   ='b,i,s,u,sub,sup,kbd,del,br,hr,div,code,h1'
        
 let g:vimwiki_list = [
             \{
             \   "path": "~/Dropbox/vimwiki", "path_html": "~/Dropbox/vimwiki/html",  
             \   "html_footer": "~/Dropbox/vimwiki/template/footer.tpl",
             \   "html_header": "~/Dropbox/vimwiki/template/header.tpl",
             \   "syntax": "markdown",
             \   "ext": ".md",
             \   "css_name": "main.css",
             \   "custom_wiki2html": "~/.vim/bundle/vimwiki/autoload/vimwiki/misaka_md2html.py",
             \   "auto_export": 0
             \}]
            
let g:vimwiki_ext2syntax    = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
"}}}

"{{{ ctrlp
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git)$',
            \ 'file': '\v\.(log|jpg|png|jpeg)$',
            \ }
"}}}

"{{{ vim-ctrlp-tjump
let g:ctrlp_tjump_only_silent = 1
"}}}

"{{{ tabbar
let g:Tb_MoreThanOne            = 0
let g:Tb_SplitBelow             = 0
let g:Tb_TabWrap                = 1
let g:Tb_MaxSize                = 3
"}}}

"{{{ ctrlp 模糊文件跳转插件
" <C-P> 打开文件
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.bak,*.bk,*~,*.so,*.swp,*.zip,*.pyc,*.o,*.obj  " 补全时忽略的文件类型
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
"}}}

"{{{ NERDTree      文件浏览器
let NERDChristmasTree           = 1
let NERDTreeWinPos              = 'left'
let NERDTreeWinSize             = 25 
" 自动开启NERDTree并将光标移动到打开的文件
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p

function! s:CloseIfOnlyNerdTreeLeft()
    if exists("t:NERDTreeBufName")
        if bufwinnr(t:NERDTreeBufName) != -1
            if winnr("$") == 1
                q
            endif
        endif
    endif
endfunction
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
"}}}

"{{{ fold 折叠所有文档注释/函数/类
"
" z[    折叠所有文档注释
" z]    打开所有文档注释
" z{    折叠所有函数
" z}    打开所有函数
"}}}


"{{{ tasklist.vim  任务列表插件
" \td           开启任务列表
let g:tlTokenList = ["FIXME", "TODO", "HACK", "NOTE", "WARN", "MODIFY"]
"}}}

"{{{ vim-bookmarks      可视化书签
let g:bookmark_highlight_lines = 1
highlight BookmarkSign ctermbg=NONE ctermfg=blue
highlight BookmarkLine ctermbg=237 ctermfg=NONE
highlight BookmarkAnnotationSign ctermbg=NONE ctermfg=blue
highlight BookmarkAnnotationLine ctermbg=016 ctermfg=NONE
"}}}

"}}}

"{{{ 编程通用插件
"{{{
if has('mac')
    let g:Cscope_ctags_cmd    = '/usr/local/bin/ctags'
endif
"}}}

"{{{ gitgutter  用于git托管项目的diff插件,显示文件变化
let g:gitgutter_realtime    = 0
let g:gitgutter_eager       = 0
"}}}

"{{{  UltiSnips
autocmd FileType * call UltiSnips#FileTypeChanged()
let g:UltiSnipsExpandTrigger        = "ii"
let g:UltiSnipsUsePythonVersion     = 2
let g:UltiSnipsEditSplit            = "vertical"
"}}}

"{{{ TagList        大纲 
let Tlist_Auto_Open             = 0
let Tlist_Auto_Update           = 1
let Tlist_Show_One_File         = 1
let Tlist_Exit_OnlyWindow       = 1
let Tlist_Use_Right_Window      = 1
let Tlist_Auto_Highlight_Tag    = 0
let Tlist_Compart_Format        = 1
let Tlist_File_Fold_Auto_Close  = 0
let Tlist_Sort_Type             = "name"
"}}}

"{{{ TagBar        适合OOP的大纲 
if has('mac')
    let Tlist_Ctags_Cmd         = '/usr/local/bin/ctags'
endif
let g:tagbar_ctags_bin          = 'ctags'
let g:tagbar_width              = 40
let g:tagbar_expand             = 2
let g:tagbar_zoomwidth          = 0
"}}}

"{{{ NERD_commenter.vim    注释插件
" \cc                   注释当前行
" \c<space>             注释掉所选块
" \cs                   /*
"                        * 形式的注释
"                        */
" \cu                   取消注释
let NERDShutUp=1
"}}}

"{{{ echofunc 函数原型提示
"
" ( 触发, 使用<Alt-n>查看下一个原型, <Alt-p>查看上一个原型
let g:EchoFuncKeyNext   =   '˜'     " <Alt-n>
let g:EchoFuncKeyPrev   =   'π'     " <Alt-p>
"}}}

"{{{ DoxygenToolkit.vim  文档插件
" :DoxLic        插入License信息
" :DoxAuthor     插入作者信息
" :Dox           插入文档注释
let g:DoxygenToolkit_undocTag               = "DOXIGEN_SKIP_BLOCK"
let g:DoxygenToolkit_briefTag_pre           = "@brief\t\t"
let g:DoxygenToolkit_paramTag_pre           = "@param\t\t"
let g:DoxygenToolkit_returnTag              = "@return\t\t"
let g:DoxygenToolkit_throwTag_pre           = "@exception\t\t"
let g:DoxygenToolkit_briefTag_funcName      = "yes"
let g:DoxygenToolkit_maxFunctionProtoLines  = 30 
"}}}

"{{{ indent-guides 对齐线插件
"
" \ig           开启对齐线
let g:indent_guides_guide_size      = 1
let g:indent_guides_auto_colors     = 0
let g:indent_guides_start_level     = 2
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=White ctermbg=DarkGray
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=White ctermbg=Gray
"}}}

"{{{ syntastic  支持多种语言的语法检查插件
let g:syntastic_check_on_open               = 0
let g:syntastic_echo_current_error          = 1
let g:syntastic_loc_list_height             = 10
let g:syntastic_python_checkers             = ['pylint', 'flake8', 'pep8', 'pyflakes']
let g:syntastic_python_pylint_args          = "-disable-msg=C0103 --max-line-length=79"
let g:syntastic_python_pep8_args            = "--max-line-length=79"
let g:syntastic_python_flake8_args          = "--max-line-length=79 --max-complexity=15"
let g:syntastic_always_populate_loc_list    = 1
"}}}

"{{{ whitespace     去除文件的行尾空白
autocmd BufWritePre     *.py        call WhitespaceStripTrailing()
autocmd BufWritePre     *.h         call WhitespaceStripTrailing()
autocmd BufWritePre     *.c         call WhitespaceStripTrailing()
autocmd BufWritePre     *.cpp       call WhitespaceStripTrailing()
"}}}

"}}}

"{{{ C/C++专用插件

"{{{ a.vim  快速切换头文件与实现文件插件
"
" :A     打开.cpp对应的.h
" :AS    打开.cpp对应的.h并且水平分屏
" :AV    打开.cpp对应的.h并且竖直分屏
" \ih    打开光标所在的文件
"}}}

"{{{ omnicppcomplete  自动提示插件
let OmniCpp_ShowScopeInAbbr             = 0     " 函数命名空间显示[0]：右侧 [1]：左侧
let OmniCpp_ShowPrototypeInAbbr         = 1     " 是否显示函数原型
let OmniCpp_SelectFirstItem             = 2     " 弹出菜单 [0]：不选中 [1]：选中并插入 [2]：选中不插入
set completeopt=longest,menu
set omnifunc=syntaxcomplete#Complete

" 用于一般的生成
" ctags -R --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ .
" 将生成tags文件拷贝到~/tags/   并改名为xxx_tags
" 解决__THROW等宏导致的问题
" 忽略列表见~/.vim/tags/filter
" ctags -R -I ./filter --file-scope=yes --langmap=c:+.h --languages=c,c++ --links=yes --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q .

" 默认加载tags
set tags=tags;/
"}}}

"}}}

"{{{ Python专用插件

"{{{ omnicppcomplete  自动提示插件
autocmd FileType python　   set omnifunc=pythoncomplete#Complete
autocmd FileType python     runtime! $HOME/.vim/bundle/pythoncomplete/autoload/pythoncomplete.vim
"}}}

"{{{ pydiction  python补全插件
" 快捷键<C-L>
let g:pydiction_location                = $HOME."/.vim/bundle/pydiction/complete-dict"
let g:pydiction_menu_height             = 10
"}}}

"}}}

"{{{ 前端专用插件

"{{{ Emmet(zen-coding)      前端插件
" <C-Z>A       从URL地址生成引用文本
" <C-Z>a       生成URL标记
" <c-y>m       合并行
" <C-Z>k       移除标签对
" <C-Z>N       跳转到上一个编辑点
" <C-Z>n       跳转到下一个编辑点
" <C-Z>D       插入模式下根据光标位置选中整个标签内容
" <C-Z>d       插入模式下根据光标位置选中整个标签
" <C-Z>;       展开tag标签
" <C-Z>,       展开缩略词
let g:user_emmet_install_global     = 0
autocmd FileType xhtml,html,css EmmetInstall
let g:user_emmet_leader_key         = '<C-Z>'
"}}}

"{{{ javascript
let b:javascript_fold               = 'false'         " 打开javascript折叠
let javascript_enable_domhtmlcss    = 1         " 打开javascript对dom、html和css的支持
autocmd BufRead,BufNewFile  *.js set syntax=jquery
autocmd FileType javascript set         omnifunc=javascriptcomplete#CompleteJS
autocmd FileType javascript set         makeprg=/usr/bin/jsl\ -nologo\ -nofilelisting\ -nosummary\ -nocontext\ -conf\ '/usr/bin/jsl.conf'\ -process\ %
autocmd FileType javascript set         errorformat=%f(%l):\ %m
autocmd FileType javascript inoremap    <silent> <F9> <C-O>:make<CR> :copen<CR>
autocmd FileType javascript map         <silent> <F9> :make<CR> :copen<CR>
"}}}

"}}}

"{{{ 其他

"{{{ lightline
let g:lightline = {
            \ 'colorscheme': 'wombat',
            \ 'component': {
            \   'readonly': '%{&readonly?"⭤":""}',
            \ },
            \ }
"}}}

"}}}
